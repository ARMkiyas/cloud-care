generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["fullTextSearch"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRoles {
    ROOTUSER
    ADMIN
    GUEST
    DOCTOR
    NURSE
    STAFF
}

enum Permissions {
    ALL
    DASH
    MANAGEUSERS_READ
    MANAGEUSERS_WRITE
    MANAGEUSERS_DELETE
}

model Permission {
    id          Int         @id @default(autoincrement())
    name        Permissions
    description String?

    users User[]
}

model UserRole {
    id    Int       @id @default(autoincrement())
    role  UserRoles @unique @default(GUEST)
    users User[]
}

model User {
    id               String      @id @default(cuid())
    name             String
    email            String      @unique
    phone            String?     @unique @map("phoneNumber")
    username         String      @unique
    emailVerified    DateTime?
    image            String?
    password         String
    twoFactorEnabled Boolean     @default(true)
    twoFactorSecret  String?
    userRoleId       Int
    role             UserRole    @relation(references: [id], fields: [userRoleId])
    accounts         Account[]
    Log              Log[]
    sessions         Session[]
    staffid          String      @unique
    staff            Staff       @relation(fields: [staffid], references: [id], onDelete: Cascade)
    Permission       Permission? @relation(fields: [permissionId], references: [id])
    permissionId     Int?
}

enum title {
    Mr
    Mrs
    Ms
    Miss
    Dr
    Prof
}

enum gender {
    male
    female
}

model Staff {
    id          String   @id @default(cuid())
    title       title    @default(Mr)
    firstName   String
    lastName    String
    dateOfBirth DateTime
    gender      gender
    image       String?
    email       String   @unique
    phone       String   @unique @map("phoneNumber")
    NIC         String?  @unique
    Passport    String?  @unique
    idNumber    String?  @unique

    doctor Doctor?
    nurse  Nurse?
    user   User?
    admin  Admin?
}

enum adminDepartment {
    Administration
    HR
    IT
    Maintenance
    Security
    Other
}

enum Departments {
    Emergency
    Internal_Medicine
    Pediatrics
    Obstetrics_Gynecology
    Surgery
    Orthopedics
    Cardiology
    Neurology
    Dermatology
    Ophthalmology
    Otolaryngology
    Gastroenterology
    Urology
    Psychiatry
    Radiology
    Anesthesiology
    Laboratory_Services
    Pharmacy
    Physical_Therapy
    Nursing
    Public_Relations_Marketing
}

model Admin {
    id String @id @default(cuid())

    department adminDepartment
    staffId    String          @unique
    staff      Staff           @relation(fields: [staffId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Patient {
    id             Int             @id @default(autoincrement())
    title          title           @default(Mr)
    firstName      String
    lastName       String
    dateOfBirth    DateTime
    gender         gender
    contactNumber  String
    email          String          @unique
    phone          String?         @map("phoneNumber")
    address        String?
    NIC            String?         @unique
    Passport       String?         @unique
    appointments   Appointment[]
    medicalReports MedicalReport[]
}

enum Appointmentstatus {
    Pending
    Confirmed
    Cancelled
    Completed
}

model Appointment {
    id        Int               @id @default(autoincrement())
    dateTime  DateTime
    status    Appointmentstatus @default(Pending)
    patientId Int
    doctorId  String
    nurseId   String?
    oPDId     Int?
    doctor    Doctor            @relation(fields: [doctorId], references: [id])
    Nurse     Nurse?            @relation(fields: [nurseId], references: [id])
    OPD       OPD?              @relation(fields: [oPDId], references: [id])
    patient   Patient           @relation(fields: [patientId], references: [id])
}

model Schedule {
    id        Int      @id @default(autoincrement())
    dayOfWeek String
    startTime DateTime
    endTime   DateTime
    doctorId  String
    doctor    Doctor   @relation(fields: [doctorId], references: [id])
}

enum DoctorSpecialization {
    GENERAL_PRACTITIONER
    CARDIOLOGIST
    ORTHOPEDIC_SURGEON
    PEDIATRICIAN
    OBSTETRICIAN_GYNECOLOGIST
    NEUROLOGIST
    DERMATOLOGIST
    OPHTHALMOLOGIST
    OTOLARYNGOLOGIST
    GASTROENTEROLOGIST
    UROLOGIST
    PSYCHIATRIST
    ENDOCRINOLOGIST
    PULMONOLOGIST
    RHEUMATOLOGIST
    INFECTIOUS_DISEASE_SPECIALIST
    NEPHROLOGIST
    HEMATOLOGIST
    ONCOLOGIST
    ALLERGIST_IMMUNOLOGIST
    GERIATRICIAN
    EMERGENCY_MEDICINE_PHYSICIAN
    ANESTHESIOLOGIST
    RADIOLOGIST
    INTENSIVIST
}

model Doctor {
    id             String               @id @default(cuid())
    specialization DoctorSpecialization
    appointments   Appointment[]
    medicalReports MedicalReport[]
    schedules      Schedule[]
    staffId        String               @unique
    staff          Staff                @relation(fields: [staffId], references: [id], onDelete: Cascade)
    departments    Department[]         @relation("DepartmentToDoctor")
}

model Nurse {
    id String @id @default(cuid())

    appointments Appointment[]
    staffId      String        @unique
    staff        Staff         @relation(fields: [staffId], references: [id], onDelete: Cascade)
    departments  Department[]  @relation("DepartmentToNurse")
}

model Department {
    id      Int         @id @default(autoincrement())
    name    Departments
    opds    OPD[]
    doctors Doctor[]    @relation("DepartmentToDoctor")
    nurses  Nurse[]     @relation("DepartmentToNurse")
}

model Clinic {
    id              Int            @id @default(autoincrement())
    name            String
    location        String
    contactNumber   String
    otherHospitalId Int?
    OtherHospital   OtherHospital? @relation(fields: [otherHospitalId], references: [id])
    opds            OPD[]
}

model OPD {
    id           Int           @id @default(autoincrement())
    name         String
    description  String
    departmentId Int
    clinicId     Int
    appointments Appointment[]
    clinic       Clinic        @relation(fields: [clinicId], references: [id])
    department   Department    @relation(fields: [departmentId], references: [id])
}

model OtherHospital {
    id            Int      @id @default(autoincrement())
    name          String
    location      String
    contactNumber String
    clinics       Clinic[]
}

model MedicalReport {
    id        Int      @id @default(autoincrement())
    date      DateTime
    content   String
    doctorId  String
    patientId Int
    doctor    Doctor   @relation(fields: [doctorId], references: [id])
    patient   Patient  @relation(fields: [patientId], references: [id])
}

model Log {
    id        Int      @id @default(autoincrement())
    action    String
    timestamp DateTime
    userId    String?
    user      User?    @relation(fields: [userId], references: [id])
}
